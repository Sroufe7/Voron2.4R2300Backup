[include shell_command.cfg]
[include mainsail.cfg]
[include purge.cfg]
[include bedfans.cfg]
[include adaptive_mesh.cfg]
[include stealthburner_leds.cfg]
[include KAMP_Settings.cfg]
[include Hotkey.cfg]
[include K-ShakeTune/*.cfg]
[virtual_sdcard]

path: /home/pi/printer_data/gcodes
on_error_gcode: CANCEL_PRINT


# This file contains common pin mappings for the BigTreeTech Octopus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON2 250/300/350mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Hotend heater pin                    [extruder] section
## Z Endstop Switch location            [safe_z_home] section
## Homing end position                  [gcode_macro G32] section
## Z Endstop Switch  offset for Z0      [stepper_z] section
## Stepper Z1 enable pin                [stepper_z1] section
## Probe points                         [quad_gantry_level] section
## Min & Max gantry corner postions     [quad_gantry_level] section
## PID tune                             [extruder] and [heater_bed] sections
## Probe pin                            [probe] section
## Fine tune E steps                    [extruder] section

[mcu]
##--------------------------------------------------------------------
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_1B002900085053424E363420-if00
restart_method: command
##--------------------------------------------------------------------


[mcu sht36]
canbus_uuid: eb0bd2927eb4     #将读取到的uuid填写到此处

#[mcu SB2040]
#canbus_uuid:  c88bfdf7d688 Steathburner 

[printer]
kinematics: corexy
max_velocity: 1000  
max_accel: 4900             #Max 4000
max_z_velocity: 20          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 15

[exclude_object]

#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  B Stepper - Left
##  Connected to MOTOR_0
##  Endstop connected to DIAG_0
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: 0
##--------------------------------------------------------------------

##  Uncomment for 300mm build
position_endstop: 300
position_max: 300

##--------------------------------------------------------------------
homing_speed: 75   #Max 100
homing_retract_dist: 0
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PC4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG6 # use the same pin that was previously the endstop_pin!
driver_SGTHRS: 75 # 255 is most sensitive value, 0 is least sensitive

##  A Stepper - Right
##  Connected to MOTOR_1
##  Endstop connected to DIAG_1
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_min: -10
##--------------------------------------------------------------------

##  Uncomment for 300mm build
position_endstop: 308
position_max: 312

##--------------------------------------------------------------------
homing_speed: 75  #Max 100
homing_retract_dist: 0
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PD11
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG9     # use the same pin that was previously the endstop_pin!
driver_SGTHRS: 95 # 255 is most sensitive value, 0 is least sensitive
 
#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to MOTOR_2
##  Endstop connected to DIAG_2
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
endstop_pin: probe:z_virtual_endstop

##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
# position_endstop: -0.5
##--------------------------------------------------------------------

##  Uncomment below for 300mm build
position_max: 260

##--------------------------------------------------------------------
position_min: -5
homing_speed: 50
second_homing_speed: 3
homing_retract_dist: 3

[tmc2209 stepper_z]
uart_pin: PC6
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z1 Stepper - Rear Left
##  Connected to MOTOR_3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z2 Stepper - Rear Right
##  Connected to MOTOR_4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z3 Stepper - Front Right
##  Connected to MOTOR_5
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0


#####################################################################
#   Extruder
#####################################################################

[extruder]
step_pin: sht36:PB4
dir_pin: sht36:PB3
enable_pin: !sht36:PA15
##  Update value below when you perform extruder calibration
##  If you ask for 100mm of filament, but in reality it is 98mm:
##  rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
rotation_distance:  47.088      #47.088
gear_ratio: 9:1
microsteps: 16
full_steps_per_rotation: 200
max_extrude_only_distance: 1000.0
max_extrude_only_velocity: 100.0
max_extrude_only_accel: 1500
max_extrude_cross_section: 5
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: sht36:PA8
sensor_pin: sht36:PA3
sensor_type: Generic 3950
#pullup_resistor: 2200             # Uncomment for PT100 Sensor with jumper installed. 
#control = pid # Sample PID - perform your own PID tuning for accurate results. 
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721
min_temp: 0
max_temp: 275
min_extrude_temp: 160
max_power: 1.0
##  Try to keep pressure_advance below 1.0
pressure_advance: 0.03
##  Default is 0.040, leave stock
pressure_advance_smooth_time: 0.040

[tmc2209 extruder]
uart_pin: sht36:PB5
stealthchop_threshold: 0
run_current: 0.6
hold_current: 0.3
interpolate: false
sense_resistor: 0.110

[firmware_retraction]
retract_length: 0
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated (but see
#   unretract_extra_length below). The default is 0 mm.
retract_speed: 20
#   The speed of retraction, in mm/s. The default is 20 mm/s.
unretract_extra_length: 0
#   The length (in mm) of *additional* filament to add when
#   unretracting.
unretract_speed: 10
#   The speed of unretraction, in mm/s. The default is 10 mm/s.


#[temperature_sensor chamber]
#sensor_type: NTC 100K MGB18-104F39050L32
#sensor_pin: PF5
#min_temp: 0
#max_temp: 100

#####################################################################
#   ADXL345
#####################################################################

[adxl345]
cs_pin: sht36:PA9
spi_software_sclk_pin: sht36:PB13
spi_software_mosi_pin: sht36:PB15
spi_software_miso_pin: sht36:PB14
axes_map: x,y,z

[resonance_tester]
accel_chip: adxl345
probe_points: 150, 150, 20

[input_shaper]
shaper_freq_x: 78.8
shaper_type_x: ei
shaper_freq_y: 46.2
shaper_type_y: mzv

#####################################################################
#   Bed Heater
#####################################################################

##  SSR Pin - HE1
##  Thermistor - TB
[heater_bed]
##  Uncomment the following line if using the default SSR wiring from the docs site
heater_pin: PA3
##  Other wiring guides may use BED_OUT to control the SSR. Uncomment the following line for those cases
#heater_pin: PA1
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
sensor_type: Generic 3950
sensor_pin: PF3
##  Adjust max_power so it doesn't exceed the SSR rating. The Omron G3NA-210B-DC5 SSR is rated at 4 amps without a heatsink.
##  The formula is "4 / (Wattage_of_bed_heater / Mains_voltage) = max_power"
##  If max_power is greater than 1.0, use 1.0
max_power: 1
min_temp: 0
max_temp: 120
control: pid
pid_Kp=53.375 
pid_Ki=2.296 
pid_Kd=310.243


#####################################################################
#   Probe
#####################################################################

[probe]
pin: sht36:PC15 # Use the high voltage port Limit_0 for Induction probes.
x_offset: 0
y_offset: 0
#z_offset: 0
speed: 10
lift_speed: 5               ; probe lift speed (was10)
samples: 3
samples_result: median
sample_retract_dist: 1
samples_tolerance: 0.01 #0.006
samples_tolerance_retries: 3

activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

#####################################################################
#   Fan Control
#####################################################################

##  Print Cooling Fan - FAN0
[fan]
pin: sht36:PB11
kick_start_time: 0.25
cycle_time: 0.15
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
off_below: 0.10

##  Hotend Fan - FAN1
[heater_fan hotend_fan]
pin: sht36:PB10
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
fan_speed: .5

[controller_fan controller_fans]
pin: PD15
max_power: 1.0
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time: 0
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   See the "fan" section for a description of the above parameters.
fan_speed: .5
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver is active.
#   The default is 1.0
idle_timeout: 60
#   The amount of time (in seconds) after a stepper driver or heater
#   was active and the fan should be kept running. The default
#   is 30 seconds.
idle_speed: .15
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver was active and
#   before the idle_timeout is reached. The default is fan_speed.
heater: extruder, heater_bed
stepper: stepper_x, stepper_y, stepper_z
#   Name of the config section defining the heater/stepper that this fan
#   is associated with. If a comma separated list of heater/stepper names
#   is provided here, then the fan will be enabled when any of the given
#   heaters/steppers are enabled. The default heater is "extruder", the
#   default stepper is all of them.

##  Exhaust fan - FAN3
#[heater_fan exhaust_fan]
#pin: PD13
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0

# Temperature controlled exhaust fan
[temperature_fan chamber_fan]
pin: PE5
max_power: 1.0
max_speed: 1.0
min_speed: 0
shutdown_speed: 0.9
kick_start_time: 0.5
#cycle_time:0.01
off_below:0.05
sensor_type: Generic 3950 #NTC 100K MGB18-104F39050L32  
sensor_pin: PF5 
min_temp: 0
max_temp: 100
target_temp: 65
control: pid
hardware_pwm: true
pid_kp: 40.0
pid_ki: 5.0
pid_kd: 0.01
gcode_id: C

[gcode_macro M141]
description: Set the chamber target temperature.
gcode:
    {% set TargetTemperature = params.S | default(0) | int %}
    {% set ChamberIndex = params.P | default(0) | int %}
    {% set HeaterNumber = params.H | default(0) | int %}
    {% set ToolNumber   = params.T | default(0) | int %}
    {% set StandbyTemperature = params.R | default(0) | int %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={TargetTemperature}

#[controller_fan sb2040-fan]
##  SB2040 5V fan
#pin: SB2040:gpio15
#kick_start_time: 0.5  # full speed to spinn of fan
#fan_speed: 0.9 #reduce speed to 90%
#heater: heater_bed  # enabled when heater bed heating

#####################################################################
#   LED Control
#####################################################################

## Chamber Lighting - HE2 Connector (Optional)
[output_pin chamber_lights]
pin: PB10
pwm:true
shutdown_value: 0
value: .5                             #the brightness at startup (0-1)
cycle_time: 0.01

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################
[idle_timeout]
timeout: 1800

#[safe_z_home]
##  XY Location of the Z Endstop Switch
##  Update -10,-10 to the XY coordinates of your endstop pin 
##  (such as 157,305) after going through Z Endstop Pin
##  Location Definition step.
#home_xy_position: 150, 150
#speed:100
#z_hop:10

[quad_gantry_level]
#--------------------------------------------------------------------
gantry_corners:
   -60,-10
   360,370
##  Probe points
points:
   50,25
   50,225
   250,225
   250,25
   
#--------------------------------------------------------------------
speed: 300
horizontal_move_z: 5
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

[bed_mesh]
speed: 350
horizontal_move_z: 5
mesh_min: 40, 40
mesh_max: 260,260
zero_reference_position: 150,150 #for use with stock z endstop
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5 # Values should be odd, so one point is directly at bed center
algorithm: bicubic


########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
#   Displays
#####################################################################

##  Uncomment the display that you have
#--------------------------------------------------------------------


##  RepRapDiscount 128x64 Full Graphic Smart Controller
#[display]
#lcd_type: st7920
#cs_pin: EXP1_4
#sclk_pin: EXP1_5
#sid_pin: EXP1_3
#menu_timeout: 40
#encoder_pins: ^EXP2_5, ^EXP2_3
#click_pin: ^!EXP1_2

#[output_pin beeper]
#pin: EXP1_1

#--------------------------------------------------------------------


##  mini12864 LCD Display
#[display]
#lcd_type: uc1701
#cs_pin: EXP1_3
#a0_pin: EXP1_4
#rst_pin: EXP1_5
#encoder_pins: ^EXP2_5, ^EXP2_3
#click_pin: ^!EXP1_2
#contrast: 63
#spi_software_miso_pin: EXP2_1
#spi_software_mosi_pin: EXP2_6
#spi_software_sclk_pin: EXP2_2

##  To control Neopixel RGB in mini12864 display
#[neopixel btt_mini12864]
#pin: EXP1_6
#chain_count: 3
#initial_RED: 0.1
#initial_GREEN: 0.5
#initial_BLUE: 0.0
#color_order: RGB

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob
#[delayed_gcode setdisplayneopixel]
#initial_duration: 1
#gcode:
#        SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
#        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
#        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 

#--------------------------------------------------------------------

#####################################################################
#   Macros
#####################################################################

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-65 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro test_speed_fast]
gcode:
        G28 X0 Y0
        GET_POSITION
        G1 X0 Y0     F26000
        G1 X290 Y290 F26000
        G1 X0 Y0     F26000
        G1 X290 Y290 F26000

        G1 X0 Y290 F60000

        G1 X290 Y0 F28000
        G1 X0 Y290 F28000
        G1 X290 Y0 F28000
        G1 X0 Y290 F28000

        G1 X0 Y0 F30000
        G1 X290 Y0 F30000
        G1 X290 Y290 F30000
        G1 X0 Y290 F30000
        G1 X0 Y0 F30000
        G28 X0 Y0
        GET_POSITION

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  65
variable_purge_distance:  45
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    M109 S240
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    #CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  85
variable_purge_distance:  0
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    M109 S240
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    #CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=unload_state

# This configuration file contains variables and macros specific for homing X and Y using stallguard rather than 
# physical switches. You will likely need to have DIAG jumpers installed on your mainboard and Klipper configured
# correctly for this to work.
# 
# More information can be found here: https://www.klipper3d.org/TMC_Drivers.html?h=sens#sensorless-homing
# 
# Be sure to [include] this .cfg file in printer.cfg **BEFORE** you have working SGTHRS/SGT values for
# [tmcXXXX stepper_x] and [tmcXXXX stepper_y] as that will simplify this process. If you already have SGTHRS/SGT
# values in your config, they will likely need adjusting after enabling this configuration.
# 
### Default motor current and homing speed are configured per axis in printer.cfg #####################################
## XY Sensorless Homing Variables:

[gcode_macro _Sensorless_Homing_Variables]
description: Variables for sensorless homing X and Y

variable_homing_current: 0.0                # The desired motor current for homing the X and Y axes. Leave as '0.0' to use run_current values instead.
variable_clear_time: 1                      # Time in seconds to wait for stallguard registers to clear, default is 1 second.
variable_x_backoff_distance: 5              # Distance in mm to back off from the X axis after homing.
variable_y_backoff_distance: 5              # Distance in mm to back off from the Y axis after homing.
variable_z_hop_distance: 10                 # Distance to move Z axis prior to homing, and after homing.
variable_first_homed_axis: 'X'              # First axis to home when 'G28' is called. Some prefer homing Y before X.

## The following variables are used for moving the printhead to a certain part of the bed before homing the Z axis:

variable_safe_z_enable: True               # Enables/disables moving the printhead before homing the Z axis.
variable_safe_x: -128                       # Safe X position to home the Z axis, leave at -128 to home to the center of the X axis.
variable_safe_y: -128                       # Safe Y position to home the Z axis, leave at -128 to home to the center of the Y axis.

# Do not modify below
gcode:

[gcode_macro _HOME_X]
gcode:

    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}            # Pull variables from _Sensorless_Homing_Variables
    {% set homing_current = sensorless_variables.homing_current | float %}                          #
    {% set backoff_distance = sensorless_variables.x_backoff_distance | float %}                    #
    {% set clear_time = (sensorless_variables.clear_time * 1000) | float %}                         #

    {% set positive_dir = printer.configfile.settings.stepper_x.homing_positive_dir | abs %}        # Pull X axis homing speed from config
    {% set homing_speed = (printer.configfile.settings['stepper_x'].homing_speed * 60) | float %}   #

    {% if homing_current != 0.0 %}                                                                  # If a homing_current is defined, do the following:
      {% if 'y' not in printer.toolhead.homed_axes %}                                               # Check if the Y axis is not homed, if Y is not homed,
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}                                  # set the homing_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}                                  #
      {% elif 'x' in printer.toolhead.homed_axes %}                                                 # 
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}                                  # If X is already homed but is requested to home again,
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}                                  # set the homing_current
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear

    G28 X                                                                                           # Home the X axis

    {% if backoff_distance > 0 %}                                                                   # Check if variable_backoff_distance is greater than 0, and back off from axis
      {% if positive_dir == True %}                                                                 # Check if the axis is homed in the positive direction
        G91                                                                                         # If it is, back away in the negative direction
        G0 X-{backoff_distance} F{homing_speed}                                                     #
        G90                                                                                         #
      {% else %}                                                                                    #
        G91                                                                                         # If the axis is not homed in the positive direction,
        G0 X{backoff_distance} F{homing_speed}                                                      # back away in the positive direction
        G90                                                                                         #
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    {% if positive_dir == True %}                                                                   # Check if homing direction is positive
      G0 X{printer.configfile.settings.stepper_x.position_endstop - backoff_distance}               # Set X axis position to remove offset incurred from sensorless homing
    {% else %}                                                                                      #
      G0 X{printer.configfile.settings.stepper_x.position_endstop + backoff_distance}               # Set X axis position to remove offset incurred from sensorless homing
    {% endif %}                                                                                     #

    {% if homing_current != 0.0 %}                                                                  # Check if a homing_current was configured

      {% if 'tmc2209 stepper_x' in printer %}                                                       # If a homing current was configured, figure out the driver type for X
        {% set driver_x = 'tmc2209' %}                                                              # and define them as driver_x
      {% elif 'tmc5160 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc5160' %}                                                              #
      {% elif 'tmc2130 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2130' %}                                                              # https://www.klipper3d.org/Config_Reference.html#tmc-stepper-driver-configuration
      {% elif 'tmc2660 stepper_x' in printer %}                                                     # All drivers at the address above containing SGTHRS or SGT configurations
        {% set driver_x = 'tmc2660' %}                                                              # are checked here
      {% elif 'tmc2240 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'tmc2209 stepper_y' in printer %}                                                       # If a homing current was configured, figure out the driver type for Y
        {% set driver_y = 'tmc2209' %}                                                              # and define them as driver_y
      {% elif 'tmc5160 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc5160' %}                                                              #
      {% elif 'tmc2130 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2130' %}                                                              # https://www.klipper3d.org/Config_Reference.html#tmc-stepper-driver-configuration
      {% elif 'tmc2660 stepper_y' in printer %}                                                     # All drivers at the address above containing SGTHRS or SGT configurations
        {% set driver_y = 'tmc2660' %}                                                              # are checked here
      {% elif 'tmc2240 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'y' in printer.toolhead.homed_axes %}                                                       # If the Y axis is already homed, do the following:
        {% set default_current_x = printer.configfile.settings[driver_x +' stepper_x'].run_current %}   # Set default_current_x to stepper_x's run_current
        {% set default_current_y = printer.configfile.settings[driver_y +' stepper_y'].run_current %}   # Set default_current_y to stepper_y's run_current
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}                                   # Revert stepper_x's current to stepper_x's run_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}                                   # Revert stepper_y's current to stepper_y's run_current
      {% endif %}
    {% endif %}                                                                                     # End of homing_current section

    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear

[gcode_macro _HOME_Y]
gcode:

    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}            # Pull variables from _Sensorless_Homing_Variables
    {% set homing_current = sensorless_variables.homing_current | float %}                          #
    {% set backoff_distance = sensorless_variables.y_backoff_distance | float %}                    #
    {% set clear_time = (sensorless_variables.clear_time * 1000) | float %}                         #

    {% set positive_dir = printer.configfile.settings.stepper_y.homing_positive_dir | abs %}        # Pull Y axis homing speed from config
    {% set homing_speed = (printer.configfile.settings['stepper_y'].homing_speed * 60) | float %}   #

    {% if homing_current != 0.0 %}                                                                  # If a homing_current is defined, do the following:
      {% if 'x' not in printer.toolhead.homed_axes %}                                               # Check if the X axis is not homed, if X is not homed,
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}                                  # set the homing_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}                                  #
      {% elif 'y' in printer.toolhead.homed_axes %}                                                 # 
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={homing_current}                                  # If Y is already homed but is requested to home again,
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={homing_current}                                  # set the homing_current
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear

    G28 Y                                                                                           # Home the Y axis

    {% if backoff_distance > 0 %}                                                                   # Check if variable_backoff_distance is greater than 0, and back off from axis
      {% if positive_dir == True %}                                                                 # Check if the axis is homed in the positive direction
        G91                                                                                         # If it is, back away in the negative direction
        G0 Y-{backoff_distance} F{homing_speed}                                                     #
        G90                                                                                         #
      {% else %}                                                                                    #
        G91                                                                                         # If the axis is not homed in the positive direction,
        G0 Y{backoff_distance} F{homing_speed}                                                      # back away in the positive direction
        G90                                                                                         #
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    {% if positive_dir == True %}                                                                   # Check if homing direction is positive
      G0 Y{printer.configfile.settings.stepper_y.position_endstop - backoff_distance}               # Set Y axis position to remove offset incurred from sensorless homing
    {% else %}                                                                                      #
      G0 Y{printer.configfile.settings.stepper_y.position_endstop + backoff_distance}               # Set Y axis position to remove offset incurred from sensorless homing
    {% endif %}                                                                                     #

    {% if homing_current != 0.0 %}                                                                  # Check if a homing_current is configured

      {% if 'tmc2209 stepper_x' in printer %}                                                       # If a homing current was configured, figure out the driver type for X
        {% set driver_x = 'tmc2209' %}                                                              # and define them as driver_x
      {% elif 'tmc5160 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc5160' %}                                                              #
      {% elif 'tmc2130 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2130' %}                                                              # https://www.klipper3d.org/Config_Reference.html#tmc-stepper-driver-configuration
      {% elif 'tmc2660 stepper_x' in printer %}                                                     # All drivers at the address above containing SGTHRS or SGT configurations
        {% set driver_x = 'tmc2660' %}                                                              # are checked here
      {% elif 'tmc2240 stepper_x' in printer %}                                                     #
        {% set driver_x = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'tmc2209 stepper_y' in printer %}                                                       # If a homing current was configured, figure out the driver type for Y
        {% set driver_y = 'tmc2209' %}                                                              # and define them as driver_y
      {% elif 'tmc5160 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc5160' %}                                                              #
      {% elif 'tmc2130 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2130' %}                                                              # https://www.klipper3d.org/Config_Reference.html#tmc-stepper-driver-configuration
      {% elif 'tmc2660 stepper_y' in printer %}                                                     # All drivers at the address above containing SGTHRS or SGT configurations
        {% set driver_y = 'tmc2660' %}                                                              # are checked here
      {% elif 'tmc2240 stepper_y' in printer %}                                                     #
        {% set driver_y = 'tmc2240' %}                                                              #
      {% endif %}                                                                                   #

      {% if 'x' in printer.toolhead.homed_axes %}                                                       # If the X axis is already homed, do the following:
        {% set default_current_x = printer.configfile.settings[driver_x +' stepper_x'].run_current %}   # Set default_current_x to stepper_x's run_current
        {% set default_current_y = printer.configfile.settings[driver_y +' stepper_y'].run_current %}   # Set default_current_y to stepper_y's run_current
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={default_current_x}                                   # Revert stepper_x's current to stepper_x's run_current
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={default_current_y}                                   # Revert stepper_y's current to stepper_y's run_current
      {% endif %}
    {% endif %}                                                                                     # End of homing_current section

    G4 P{clear_time}                                                                                # Wait for stallguard registers to clear

[homing_override]
axes: xyz
set_position_z: 5
gcode:

    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}              #
    {% set z_hop_speed = (printer.configfile.settings['stepper_z'].homing_speed * 60) | float %}    #
    {% set travel_speed = (printer.toolhead.max_velocity * 60) | float %}                           #
    {% set sensorless_variables = printer["gcode_macro _Sensorless_Homing_Variables"] %}            #
    {% set z_hop_distance = sensorless_variables.z_hop_distance | float %}                          # Collect all variables needed for sensorless homing
    {% set first_homed_axis = sensorless_variables.first_homed_axis | string %}                     # from machine config file and _Sensorless_Homing_Variables
    {% set safe_x = sensorless_variables.safe_x | float %}                                          #
    {% set safe_y = sensorless_variables.safe_y | float %}                                          #
    {% set safe_z = sensorless_variables.safe_z_enable | abs %}                                     #

    {% if printer.configfile.settings.beacon is defined %}                                          # Check if a third-party [probe] definiton is used
        {% set probe_name = printer.configfile.settings.beacon %}                                   # If [beacon] is found in config, set 'probe_name' as [beacon] config string
    {% elif printer.configfile.settings.probe is defined %}                                         #
        {% set probe_name = printer.configfile.settings.probe %}                                    # If [probe] is found in config, set 'probe_name' as [probe] config string
    {% elif printer.configfile.settings.dockable_probe is defined %}                                #
        {% set probe_name = printer.configfile.settings.dockable_probe %}                           # If [dockable_probe] is found in config, set 'probe_name' as [dockable_probe] config string
    {% elif printer.configfile.settings.bltouch is defined %}                                       #
        {% set probe_name = printer.configfile.settings.bltouch %}                                  # If [bltouch] is found in config, set 'probe_name' as [bltouch] config string
    {% endif %}                                                                                     #

    {% if 'probe' in printer.configfile.settings.stepper_z.endstop_pin %}                           # Check if Z is configured to home with a probe and pull config values for
        {% set probe_x_offset = probe_name.x_offset | float %}                                      # X and Y offsets
        {% set probe_y_offset = probe_name.y_offset | float %}                                      #
    {% else %}                                                                                      #
        {% set probe_x_offset = 0 | float %}                                                        #
        {% set probe_y_offset = 0 | float %}                                                        # If Z if not homed with a probe, set offsets to 0 (do not apply an offset)
    {% endif %}                                                                                     #

    {% if safe_x == -128 %}                                                                         #
        {% set safe_x = (printer.configfile.settings.stepper_x.position_max) /2 %}                  # If safe_x is '-128', set safe_x to the center of the X axis
    {% endif %}                                                                                     #

    {% if probe_x_offset < 0 %}                                                                     #
        {% set safe_x = safe_x + probe_x_offset %}                                                  #
    {% elif probe_x_offset > 0 %}                                                                   # Depending on if probe_x_offset is a positive or negative value, adjust safe_x
        {% set safe_x = safe_x - probe_x_offset %}                                                  # If the machine does not home Z with a probe, an offset is not applied.
    {% endif %}                                                                                     #

    {% if safe_y == -128 %}                                                                         # 
        {% set safe_y = (printer.configfile.settings.stepper_y.position_max) /2 %}                  # If safe_y is '-128', set safe_y to the center of the Y axis
    {% endif %}                                                                                     #

    {% if probe_y_offset < 0 %}                                                                     #
        {% set safe_y = safe_y + probe_y_offset %}                                                  #
    {% elif probe_y_offset > 0 %}                                                                   # Depending on if probe_y_offset is a positive or negative value, adjust safe_y
        {% set safe_y = safe_y - probe_y_offset %}                                                  # If the machine does not home Z with a probe, an offset is not applied.
    {% endif %}                                                                                     #

    {% if z_hop_distance > 0 %}                                                                     # Check if z_hop_distance is greater than zero
      {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes %}    # If X and Y are not homed, move Z to z_hop_distance
        G0 Z{z_hop_distance} F{z_hop_speed}                                                         #
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    {% if first_homed_axis == 'X' %}                                                                # If first_homed_axis is 'X', begin G28 param check
      {% if home_all or 'X' in params %}                                                            #
        _HOME_X                                                                                     # If home_all or 'X' is in params, home X
      {% endif %}                                                                                   #
      {% if home_all or 'Y' in params %}                                                            # If home_all or 'Y' in params, home Y
        _HOME_Y                                                                                     #
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    {% if first_homed_axis == 'Y' %}                                                                # If first_homed_axis is 'Y', begin G28 param check
      {% if home_all or 'Y' in params %}                                                            #
        _HOME_Y                                                                                     # if home_all or 'Y' is in params, home Y
      {% endif %}                                                                                   #
      {% if home_all or 'X' in params %}                                                            # If home_all or 'X' in params, home X
        _HOME_X                                                                                     #
      {% endif %}                                                                                   #
    {% endif %}                                                                                     #

    {% if safe_z == True and (home_all or 'Z' in params) %}                                         # If safe_z is true and home_all or 'Z' is in params,
        G0 X{safe_x} Y{safe_y} F{travel_speed}                                                      # Move to the defined safe XY location
    {% endif %}                                                                                     #

    {% if home_all or 'Z' in params %}                                                              #
        G28 Z                                                                                       # Home the Z axis
        G0 Z{z_hop_distance} F{z_hop_speed}                                                         # Move Z to z_hop_distance
    {% endif %}                                                                                     #

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    CLEAN_NOZZLE
    QUAD_GANTRY_LEVEL
    G28
   
#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    #SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  CLEAN_NOZZLE
  quad_gantry_level               # Levels the buildplate via QGL
  #G28 Z                           # Homes Z again after QGL

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Waiting to heat Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  #SMART_PARK
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  G90                                              # Absolut position
  CLEAN_NOZZLE
  VORON_PURGE
  
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.007361, 0.024861, 0.026111, 0.006111, -0.002639
#*# 	  -0.026389, 0.014861, 0.011111, -0.018889, 0.002361
#*# 	  0.003611, -0.000139, -0.006389, -0.005139, -0.020139
#*# 	  -0.002639, 0.021111, 0.021111, 0.001111, 0.014861
#*# x_count = 5
#*# y_count = 4
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 40.0
#*# max_x = 260.0
#*# min_y = 81.22
#*# max_y = 218.78
#*#
#*# [probe]
#*# z_offset = -0.120
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 32.660
#*# pid_ki = 4.733
#*# pid_kd = 56.339
#*#
#*# [input_shaper]
